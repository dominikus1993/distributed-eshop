// <auto-generated />
using System;
using System.Reflection;
using Catalog.Core.Model;
using Catalog.Infrastructure.DbContexts.Configuration;
using Catalog.Infrastructure.Model;
using Microsoft.EntityFrameworkCore.Metadata;
using NpgsqlTypes;

#pragma warning disable 219, 612, 618
#nullable enable

namespace Catalog.Infrastructure.DbContexts
{
    internal partial class EfProductEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType? baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Catalog.Infrastructure.Model.EfProduct",
                typeof(EfProduct),
                baseEntityType);

            var productId = runtimeEntityType.AddProperty(
                "ProductId",
                typeof(ProductId),
                propertyInfo: typeof(EfProduct).GetProperty("ProductId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EfProduct).GetField("<ProductId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                valueConverter: new ProductIdConverter());
            productId.AddAnnotation("Relational:ColumnName", "product_id");

            var availableQuantity = runtimeEntityType.AddProperty(
                "AvailableQuantity",
                typeof(int),
                propertyInfo: typeof(EfProduct).GetProperty("AvailableQuantity", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EfProduct).GetField("<AvailableQuantity>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            availableQuantity.AddAnnotation("Relational:ColumnName", "available_quantity");

            var dateCreated = runtimeEntityType.AddProperty(
                "DateCreated",
                typeof(DateTime),
                propertyInfo: typeof(EfProduct).GetProperty("DateCreated", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EfProduct).GetField("<DateCreated>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                valueConverter: new UtcTimeConverter());
            dateCreated.AddAnnotation("Relational:ColumnName", "date_created");
            dateCreated.AddAnnotation("Relational:DefaultValueSql", "(now() at time zone 'utc')");

            var description = runtimeEntityType.AddProperty(
                "Description",
                typeof(string),
                propertyInfo: typeof(EfProduct).GetProperty("Description", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EfProduct).GetField("<Description>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            description.AddAnnotation("Relational:ColumnName", "description");

            var name = runtimeEntityType.AddProperty(
                "Name",
                typeof(string),
                propertyInfo: typeof(EfProduct).GetProperty("Name", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EfProduct).GetField("<Name>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            name.AddAnnotation("Relational:ColumnName", "name");

            var price = runtimeEntityType.AddProperty(
                "Price",
                typeof(decimal),
                propertyInfo: typeof(EfProduct).GetProperty("Price", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EfProduct).GetField("<Price>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            price.AddAnnotation("Relational:ColumnName", "price");

            var promotionalPrice = runtimeEntityType.AddProperty(
                "PromotionalPrice",
                typeof(decimal?),
                propertyInfo: typeof(EfProduct).GetProperty("PromotionalPrice", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EfProduct).GetField("<PromotionalPrice>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            promotionalPrice.AddAnnotation("Relational:ColumnName", "promotional_price");

            var searchVector = runtimeEntityType.AddProperty(
                "SearchVector",
                typeof(NpgsqlTsVector),
                propertyInfo: typeof(EfProduct).GetProperty("SearchVector", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EfProduct).GetField("<SearchVector>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAddOrUpdate,
                beforeSaveBehavior: PropertySaveBehavior.Ignore,
                afterSaveBehavior: PropertySaveBehavior.Ignore);
            searchVector.AddAnnotation("Npgsql:TsVectorConfig", "english");
            searchVector.AddAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "Description" });
            searchVector.AddAnnotation("Relational:ColumnName", "search_vector");
            searchVector.AddAnnotation("Relational:ColumnType", "tsvector");

            var key = runtimeEntityType.AddKey(
                new[] { productId });
            runtimeEntityType.SetPrimaryKey(key);
            key.AddAnnotation("Relational:Name", "pk_products");

            var index = runtimeEntityType.AddIndex(
                new[] { dateCreated });
            index.AddAnnotation("Relational:Name", "ix_products_date_created");

            var index0 = runtimeEntityType.AddIndex(
                new[] { searchVector });
            index0.AddAnnotation("Npgsql:IndexMethod", "GIN");
            index0.AddAnnotation("Relational:Name", "ix_products_search_vector");

            var index1 = runtimeEntityType.AddIndex(
                new[] { price, promotionalPrice });
            index1.AddAnnotation("Relational:Name", "ix_products_price_promotional_price");

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "products");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
